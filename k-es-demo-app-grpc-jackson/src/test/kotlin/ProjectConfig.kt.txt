import io.kotest.core.config.AbstractProjectConfig
import io.kotest.extensions.testcontainers.perSpec
import org.testcontainers.containers.FixedHostPortGenericContainer
import org.testcontainers.containers.GenericContainer
import org.testcontainers.containers.wait.strategy.Wait
import org.testcontainers.utility.DockerImageName
import kotlin.time.ExperimentalTime

//@ExperimentalTime
object ProjectConfig : AbstractProjectConfig() {

    val eventStoreDockerImageName = DockerImageName.parse("eventstore/eventstore:21.6.0-buster-slim")
    val mssqlDockerImageName = DockerImageName.parse("docker-all.artifactory.fiks.ks.no/fiks-mssql")


    val eventStoreContainer = FixedHostPortGenericContainer<FixedHostPortGenericContainer<*>>(eventStoreDockerImageName.asCanonicalNameString())
        .withEnv("EVENTSTORE_RUN_PROJECTIONS","All")
        .withEnv("EVENTSTORE_START_STANDARD_PROJECTIONS","True")
        .withEnv("EVENTSTORE_CLUSTER_SIZE","1")
        .withEnv("EVENTSTORE_INSECURE", "True")
        .withEnv("EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP", "True")
        .withEnv("EVENTSTORE_ENABLE_EXTERNAL_TCP", "True")
        .withExposedPorts(1113)
        .withFixedExposedPort(2113, 2113)
        .withFixedExposedPort(1113, 1113)
        .waitingFor(Wait.forLogMessage(".*initialized.*\\n", 4))

    val mssqlContainer = FixedHostPortGenericContainer<FixedHostPortGenericContainer<*>>(mssqlDockerImageName.asCanonicalNameString())
        .withEnv("ACCEPT_EULA", "Y")
        .withEnv("SA_PASSWORD", "Test1234!")
        .withEnv("DB_NAME", "kesdemo")
        .withFixedExposedPort(1433, 1433)
        .waitingFor(Wait.forLogMessage(".*Starting up database 'kesdemo'.*\\n", 1))

    override fun extensions() = listOf(
        eventStoreContainer.perSpec(),
        mssqlContainer.perSpec(),
    )

}